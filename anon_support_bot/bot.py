from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from database.db import initialize_database, add_user, create_ticket, get_operators, assign_ticket_to_operator, close_ticket, get_ticket_by_id, get_working_tickets, get_open_ticket, get_ticket_info

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
initialize_database()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"
    add_user(user_id, username)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –≤–∞–º –ø–æ–º–æ–∂–µ–º.")


async def notify_operators_of_user_message(context: ContextTypes.DEFAULT_TYPE, ticket_id: int, user_id: int, question: str) -> None:
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –æ—Ç–∫—Ä—ã—Ç–æ–º—É —Ç–∏–∫–µ—Ç—É."""
    operators_ids = get_operators()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    
    if not operators_ids:
        print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        return  # –ï—Å–ª–∏ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–∞–∂–¥–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    for operator_id in operators_ids:
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"
        keyboard = [
            [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data=f"end_dialog_{ticket_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await context.bot.send_message(
            chat_id=operator_id, 
            text=f"#{ticket_id}: {question}",
            reply_markup=reply_markup  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É —Å –∫–Ω–æ–ø–∫–æ–π
        )


async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞."""
    user_id = update.effective_user.id
    question = update.message.text

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    operators_ids = get_operators()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
    if user_id in operators_ids:
        await handle_operator_message(update, context, question)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–∏–∫–µ—Ç
        open_ticket = get_open_ticket(user_id)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã 'in_progress' –∏–ª–∏ 'new'

        if open_ticket:
            # –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–∏–∫–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ticket_id = open_ticket[0]  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - —ç—Ç–æ ID —Ç–∏–∫–µ—Ç–∞
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –ø–æ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ–º—É —Ç–∏–∫–µ—Ç—É
            await notify_operators_of_user_message(context, ticket_id, user_id, question)
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            ticket_id = create_ticket(user_id, question)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º —Ç–∏–∫–µ—Ç–µ
            await notify_operators(context, ticket_id, user_id, question)

            await update.message.reply_text("–í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")


async def notify_operators(context: ContextTypes.DEFAULT_TYPE, ticket_id: int, user_id: int, question: str) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º —Ç–∏–∫–µ—Ç–µ."""
    operators = get_operators()
    if not operators:
        return  # –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏

    for operator in operators:
        operator_id = operator  # –ü–æ–ª—É—á–∞–µ–º ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
        keyboard = [
            [InlineKeyboardButton("–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_{ticket_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await context.bot.send_message(
            chat_id=operator_id,
            text=f"üë§ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\nüí¨ –í–æ–ø—Ä–æ—Å: {question}\nüìù –ù–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞: {ticket_id}",
            reply_markup=reply_markup
        )

async def take_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–ø–µ—Ä–∞—Ç–æ—Ä –±–µ—Ä–µ—Ç —Ç–∏–∫–µ—Ç –≤ —Ä–∞–±–æ—Ç—É."""
    query = update.callback_query
    ticket_id = int(query.data.split("_")[1])
    operator_id = update.effective_user.id

    assign_ticket_to_operator(ticket_id, operator_id)

    await query.answer("–í—ã –≤–∑—è–ª–∏ —Ç–∏–∫–µ—Ç –≤ —Ä–∞–±–æ—Ç—É.")
    await context.bot.send_message(chat_id=operator_id, text="–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ
    ticket = get_ticket_by_id(ticket_id)
    user_id = ticket[2]  # user_id –∏–∑ —Ç–∏–∫–µ—Ç–∞
    await context.bot.send_message(chat_id=user_id, text="–û–ø–µ—Ä–∞—Ç–æ—Ä –≤–∑—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —Ä–∞–±–æ—Ç—É. –í—ã –º–æ–∂–µ—Ç–µ –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞.")

async def finish_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä."""
    query = update.callback_query
    ticket_id = int(query.data.split("_")[1])

    close_ticket(ticket_id)

    await query.answer("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.")
    await context.bot.send_message(chat_id=query.from_user.id, text="–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –≤—Ä–µ–º—è!")

async def handle_operator_message(update: Update, context: ContextTypes.DEFAULT_TYPE, question: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤."""
    operator_id = update.effective_user.id
    message_text = update.message.text

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–∫–µ—Ç—ã, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –∏ –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ —Ä–∞–±–æ—Ç–µ
    assigned_tickets = get_working_tickets()  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ —Ç–∏–∫–µ—Ç—ã
    ticket_found = False  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –Ω–∞–π–¥–µ–Ω –ª–∏ —Ç–∏–∫–µ—Ç

    for ticket in assigned_tickets:
        if ticket[3] == operator_id:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–∞ —Ç–∏–∫–µ—Ç
            user_id = ticket[2]  # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Ç–∏–∫–µ—Ç–∞
            

            await context.bot.send_message(
                chat_id=user_id,
                text=f"{message_text}",
            )
            ticket_found = True
            break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞

    if not ticket_found:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")



async def end_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º."""
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏

    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–∏–∫–µ—Ç–∞ –∏–∑ callback_data
    ticket_id = int(query.data.split("_")[2])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∏–∫–µ—Ç–∞

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    close_ticket(ticket_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, user_id), —á—Ç–æ–±—ã —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ticket_info = get_ticket_info(ticket_id)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è
    user_id = ticket_info[2]  # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–∫–µ—Ç–µ

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞
    await context.bot.send_message(
        chat_id=user_id,
        text="–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º."
    )

    # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    await query.edit_message_text(text=f"Ticket {ticket_id} –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É —Ä–∞–±–æ—Ç—É.")





def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token('6793726422:AAGaEZ588yVlgKa7OlcNjDwu2RV5t2Z9yQg').build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_message))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    application.add_handler(CallbackQueryHandler(take_ticket, pattern=r"^take_"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É"
    application.add_handler(CallbackQueryHandler(end_dialog, pattern=r"^end_dialog_"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_operator_message))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤

    application.run_polling()

if __name__ == '__main__':
    main()
