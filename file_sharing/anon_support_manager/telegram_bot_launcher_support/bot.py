import os
import django
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from django.conf import settings
from anon_support_manager.models import User, Ticket, Operator
from django.utils import timezone
from asgiref.sync import sync_to_async

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'file_sharing.settings')
django.setup()

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async def get_or_create_user(user_id, username):
    user, created = await sync_to_async(User.objects.get_or_create)(user_id=user_id, defaults={'username': username})
    if not created:
        user.username = username
        await sync_to_async(user.save)()
    return user

async def get_operator_by_user(user):
    try:
        operator = await sync_to_async(Operator.objects.get)(user=user)
        return operator
    except Operator.DoesNotExist:
        return None

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"
    user = await get_or_create_user(user_id, username)

    welcome_message = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –≤–∞–º –ø–æ–º–æ–∂–µ–º."
    await update.message.reply_text(welcome_message)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
    operator = await get_operator_by_user(user)
    if operator:
        await operator_menu(update, context)

async def operator_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏."""
    keyboard = [
        [KeyboardButton("–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É")],
        [KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–∫–µ—Ç—ã")],
        [KeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def start_shift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–º–µ–Ω—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞."""
    user_id = update.effective_user.id
    operator = await get_operator_by_user(await get_or_create_user(user_id, update.effective_user.username))

    if operator:
        operator.is_active = True
        await sync_to_async(operator.save)()
        await operator_menu(update, context)
        await update.message.reply_text("–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ç–∏–∫–µ—Ç—ã.")
    else:
        await update.message.reply_text("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.")

async def end_shift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–º–µ–Ω—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞."""
    user_id = update.effective_user.id
    operator = await get_operator_by_user(await get_or_create_user(user_id, update.effective_user.username))

    if operator:
        operator.is_active = False
        await sync_to_async(operator.save)()
        await update.message.reply_text("–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        await operator_menu(update, context)
    else:
        await update.message.reply_text("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.")

async def send_available_tickets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º."""
    available_tickets = await sync_to_async(list)(Ticket.objects.filter(status='new', assigned_user__isnull=True))
    active_operators = await sync_to_async(list)(Operator.objects.filter(is_active=True))

    if not active_operators:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    if not available_tickets:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.")
        return

    for operator in active_operators:
        user = await sync_to_async(lambda: operator.user)()
        
        if not user:
            continue

        for ticket in available_tickets:
            keyboard = [
                [InlineKeyboardButton("–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_{ticket.ticket_id}")],
                [InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", callback_data=f"close_{ticket.ticket_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            try:
                await context.bot.send_message(
                    chat_id=user.user_id,
                    text=f"–î–æ—Å—Ç—É–ø–Ω—ã–π —Ç–∏–∫–µ—Ç: #{ticket.ticket_id}\n–í–æ–ø—Ä–æ—Å: {ticket.question or '–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–∞'}",
                    reply_markup=reply_markup
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {user.username}: {e}")

            available_tickets.remove(ticket)
            break

    if available_tickets:
        await update.message.reply_text("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∏–∫–µ—Ç—ã –Ω–µ –±—ã–ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.")

async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤."""
    user_id = update.effective_user.id
    question = update.message.text
    user = await get_or_create_user(user_id, update.effective_user.username)

    operator = await get_operator_by_user(user)
    if operator:
        if question == "–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É":
            await start_shift(update, context)
            return
        elif question == "–ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É":
            await end_shift(update, context)
            return
        elif question == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–∫–µ—Ç—ã":
            await send_available_tickets(update, context)
            return
        elif operator.is_active:
            await handle_operator_message(update, context)
            return

    # Check if the user has an open ticket
    open_ticket = await sync_to_async(lambda: Ticket.objects.filter(user=user, status__in=['in_progress', 'new']).first())()

    if open_ticket:
        ticket_id = await sync_to_async(lambda: open_ticket.ticket_id)()
        operator_user = await sync_to_async(lambda: open_ticket.assigned_user)()
        if operator_user:
            keyboard = [[InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data=f"end_dialog_{ticket_id}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_message(chat_id=operator_user.user_id, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{ticket_id} —Å–ø—Ä–æ—Å–∏–ª: {question}", reply_markup=reply_markup)
        else:
            await notify_operators_of_user_message(context, ticket_id, user_id, question)
    else:
        # If no open ticket exists, notify all active operators
        ticket = await sync_to_async(Ticket.objects.create)(
            user=user,
            question=question,
            status='new',
            created_at=timezone.now()
        )
        await notify_operators(context, ticket.ticket_id, user_id, question)
        await update.message.reply_text("–í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")

async def handle_operator_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤."""
    operator_id = update.effective_user.id
    message_text = update.message.text

    assigned_tickets = await sync_to_async(list)(Ticket.objects.filter(assigned_user__user_id=operator_id, status='in_progress'))

    if not assigned_tickets:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
        return

    ticket = assigned_tickets[0]
    ticket_user = await sync_to_async(lambda: ticket.user.user_id)()
    await context.bot.send_message(chat_id=ticket_user, text=f"{message_text}")

async def notify_operators_of_user_message(context: ContextTypes.DEFAULT_TYPE, ticket_id: int, user_id: int, question: str) -> None:
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    operators = await sync_to_async(list)(Operator.objects.filter(is_active=True))
    if not operators:
        return
    for operator in operators:
        chat_id = await sync_to_async(lambda: operator.user.user_id)()
        await context.bot.send_message(chat_id=chat_id, text=f"#{ticket_id}: {question}")



async def notify_operators(context: ContextTypes.DEFAULT_TYPE, ticket_id: int, user_id: int, question: str) -> None:
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º —Ç–∏–∫–µ—Ç–µ."""
    operators = await sync_to_async(list)(Operator.objects.filter(is_active=True))
    if not operators:
        return

    for operator in operators:
        keyboard = [
            [InlineKeyboardButton("–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_{ticket_id}")],
            [InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", callback_data=f"close_{ticket_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_message(
            chat_id=await sync_to_async(lambda: operator.user.user_id)(),
            text=f"üë§ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\nüí¨ –í–æ–ø—Ä–æ—Å: {question}\nüìù –ù–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞: {ticket_id}",
            reply_markup=reply_markup
        )

async def end_dialog_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞."""
    query = update.callback_query
    await query.answer()

    try:
        ticket_id = int(query.data.split("_")[2])
        ticket = await sync_to_async(Ticket.objects.get)(ticket_id=ticket_id)
        
        if ticket.status != 'closed':
            ticket.status = 'closed'
            
            user_id = await sync_to_async(lambda: ticket.user.user_id)()
            operator_id = await sync_to_async(lambda: ticket.assigned_user.user_id)()

            await context.bot.send_message(chat_id=user_id, text="–í–∞—à –¥–∏–∞–ª–æ–≥ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º!")
            await context.bot.send_message(chat_id=operator_id, text="–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.")
            
            await query.edit_message_text(f"–î–∏–∞–ª–æ–≥ –ø–æ —Ç–∏–∫–µ—Ç—É #{ticket_id} –∑–∞–≤–µ—Ä—à–µ–Ω.")
            await sync_to_async(ticket.save)()
        else:
            await query.edit_message_text(f"–¢–∏–∫–µ—Ç #{ticket_id} —É–∂–µ –∑–∞–∫—Ä—ã—Ç.")
    except (ValueError, Ticket.DoesNotExist):
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞. –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def take_ticket_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –≤–∑—è—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É."""
    query = update.callback_query
    await query.answer()
    
    try:
        ticket_id = int(query.data.split("_")[1])
        ticket = await sync_to_async(Ticket.objects.get)(ticket_id=ticket_id)
        question = await sync_to_async(lambda: ticket.question)()
        
        operator = await get_operator_by_user(await get_or_create_user(update.effective_user.id, update.effective_user.username))
        work_operator = await sync_to_async(lambda: ticket.assigned_user)()
        if work_operator is None:
            ticket.status = 'in_progress'
            ticket.assigned_user = await sync_to_async(lambda: operator.user)()
            keyboard = [
                [InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", callback_data=f"close_{ticket_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await sync_to_async(ticket.save)()
            await query.edit_message_text(f"–í—ã –≤–∑—è–ª–∏ —Ç–∏–∫–µ—Ç #{ticket_id} –≤ —Ä–∞–±–æ—Ç—É.\n\n –í–æ–ø—Ä–æ—Å:{question}", reply_markup=reply_markup)
        else:
            await query.edit_message_text("–≠—Ç–æ—Ç —Ç–∏–∫–µ—Ç —É–∂–µ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    except (ValueError, Ticket.DoesNotExist):
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∏–∫–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def close_ticket_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    try:
        ticket_id = int(query.data.split("_")[1])
        ticket = await sync_to_async(Ticket.objects.get)(ticket_id=ticket_id)
        
        if ticket.status != 'closed':
            ticket.status = 'closed'
            user_id = await sync_to_async(lambda: ticket.user.user_id)()
            await context.bot.send_message(chat_id=user_id, text="–í–∞—à —Ç–∏–∫–µ—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!")
            await query.edit_message_text(f"–¢–∏–∫–µ—Ç #{ticket_id} –±—ã–ª –∑–∞–∫—Ä—ã—Ç.")
            await sync_to_async(ticket.save)()
        else:
            await query.edit_message_text(f"–¢–∏–∫–µ—Ç #{ticket_id} —É–∂–µ –∑–∞–∫—Ä—ã—Ç.")
    except (ValueError, Ticket.DoesNotExist):
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –∫–æ–º–∞–Ω–¥
def main():
    application = Application.builder().token(settings.ANON_SUPPORT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_message))
    application.add_handler(CallbackQueryHandler(end_dialog_handler, pattern=r"end_dialog_\d+"))
    application.add_handler(CallbackQueryHandler(take_ticket_handler, pattern=r"take_\d+"))
    application.add_handler(CallbackQueryHandler(close_ticket_handler, pattern=r"close_\d+"))

    application.run_polling()

if __name__ == "__main__":
    main()
