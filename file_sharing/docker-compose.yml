services:
  web:
    build: 
      context: .
      dockerfile: Dockerfile  
    volumes:
      - static_volume:/home/app/web/staticfiles
      - media_volume:/home/app/web/media   
      - .:/app                     
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
    depends_on:
      - db
      - redis
    command: >
      sh -c "python manage.py migrate && python manage.py collectstatic --noinput && daphne -b 0.0.0.0 -p 8000 file_sharing.asgi:application"

  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/home/app/web/staticfiles
      - media_volume:/home/app/web/media
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./nginx/logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    restart: always

  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: certonly --webroot -w /var/www/certbot --force-renewal --email lider2928@gmail.com -d anonloader.io --agree-tos
    
  db:
    image: postgres:latest
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  anon_bot:
    build: .
    command: python manage.py anon
    depends_on:
      - db
      - web
      - telegram-bot-api
    volumes:
      - .:/app
      - telegram-bot-api-data:/var/lib/telegram-bot-api 
    restart: always
    environment:
      - ANON_BOT_KEY=${ANON_TOKEN}

  support_bot:
    build: .
    command: python manage.py support
    depends_on:
      - db
      - web
    volumes:
      - .:/app
    restart: always
    environment:
      - ANON_BOT_KEY=${ANON_SUPPORT_TOKEN}

  redis:
    image: "redis:alpine"

  celery:
    build: .
    command: celery -A file_sharing worker -l info
    volumes:
      - .:/app
      - media_volume:/home/app/web/media
    depends_on:
      - redis
      - web
    restart: always

  flower:
    build: .
    command: celery -A file_sharing flower
    volumes:
      - .:/app
    depends_on:
      - celery
      - web
    ports:
      - "5555:5555"
    restart: always

  telegram-bot-api:
    image: aiogram/telegram-bot-api:latest
    environment:
      TELEGRAM_API_ID: "2110117" 
      TELEGRAM_API_HASH: "3716da0d0d88a9317845ab7e20daf2a0"
      TELEGRAM_LOCAL: "1"
      TELEGRAM_MAX_CONNECTIONS: "1000"  # Установите в зависимости от ожидаемой нагрузки
      TELEGRAM_VERBOSITY: "1"  # Для повышения уровня логирования
    volumes:
      - telegram-bot-api-data:/var/lib/telegram-bot-api
    ports:
      - "8081:8081"  # Порт для доступа к Bot API

  celery_beat:
    build: .
    command: celery -A file_sharing beat -l info
    volumes:
      - .:/app
    depends_on:
      - redis
      - celery
      - web
    restart: always

volumes:
  media_volume:
  static_volume:
  postgres_data:
  nginx_logs:
  telegram-bot-api-data: