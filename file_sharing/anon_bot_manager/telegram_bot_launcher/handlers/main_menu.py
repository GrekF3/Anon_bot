# main_menu.py

from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from anon_bot_manager.telegram_bot_launcher.handlers.privacy_policy import privacy_policy
from anon_bot_manager.telegram_bot_launcher.handlers.link_generation import generate_link
from anon_bot_manager.telegram_bot_launcher.handlers.profile import profile
from anon_bot_manager.telegram_bot_launcher.handlers.support import support_bot
from anon_bot_manager.models import BotUser
from asgiref.sync import sync_to_async

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    print('–ö—Ç–æ-—Ç–æ –Ω–∞–∂–∞–ª —Å—Ç–∞—Ä—Ç))')
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    context.user_data.clear()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, created = await sync_to_async(BotUser.objects.get_or_create)(
            user_id=user_id,
            defaults={'username': username}
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º username, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
        if not created and user.username != username:
            user.username = username
            await sync_to_async(user.save)()  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        if not user.user_consent:
            await privacy_policy(update, context)
        else:
            await show_main_menu(update)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

async def show_main_menu(update: Update) -> None:
    user_id = update.message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Django ORM
    try:
        user = await sync_to_async(BotUser.objects.get)(user_id=user_id)
    except BotUser.DoesNotExist:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [
        [KeyboardButton("üîó –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É üîó")],
        [KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üÜò")],
        [KeyboardButton("üìï –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ üìï")]
    ]

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=reply_markup)

async def handle_user_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Django ORM
        user_profile = await sync_to_async(BotUser.objects.get)(user_id=user_id)
    except BotUser.DoesNotExist:
        await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    selected_option = update.message.text
    if selected_option == "üîó –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É üîó":
        await generate_link(update, context)
    elif selected_option == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        await profile(update, context)
    elif selected_option in ["–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üÜò"]:
        await support_bot(update, context)
    elif selected_option == "üìï –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ üìï":
        await privacy_policy(update, context)
    elif selected_option == "‚öô –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–æ–µ –º–µ–Ω—é ‚öô" and user_profile.is_admin:
        # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω-–º–µ–Ω—é, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        await update.message.reply_text("–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–æ–µ –º–µ–Ω—é.")
    elif selected_option == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await show_main_menu(update)
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é.")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ –∫–æ–ª–±–µ–∫ –±—ã–ª –ø–æ–ª—É—á–µ–Ω

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['state'] = None  
    context.user_data['uploaded_content'] = None  # –£–±–∏—Ä–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –µ—Å–ª–∏ –µ—Å—Ç—å

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await query.message.edit_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
