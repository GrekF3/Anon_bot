# admin_menu.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, CommandHandler
from db import get_statistics
from handlers.privacy_policy import privacy_policy
from handlers.link_generation import generate_link
from handlers.profile import profile
from handlers.subscription import subscription
from handlers.admin_utils import handle_broadcast_message, search_user, block_user  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
from handlers.link_generation import ask_for_link_lifetime

# –≠—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
ADMIN_MENU = 'admin_menu'
BROADCAST_MESSAGE = 'broadcast_message'
SEARCH_USER = 'search_user'
BLOCK_USER = 'block_user'

async def show_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data['state'] = 'admin_menu'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞

    keyboard = [
        [InlineKeyboardButton("üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data='broadcast')],
        [InlineKeyboardButton("üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data='manage_users')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='statistics')],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='search_user')],
        [InlineKeyboardButton("üíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", callback_data='manage_subscriptions')],
        [InlineKeyboardButton("üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='block_user')]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω—Å–∫—É—é –æ–ø—Ü–∏—é:', reply_markup=reply_markup)

async def handle_admin_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == 'broadcast':
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        context.user_data['state'] = BROADCAST_MESSAGE
    elif query.data == 'search_user':
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (username):")
        context.user_data['state'] = SEARCH_USER
    elif query.data == 'block_user':
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (username) –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
        context.user_data['state'] = BLOCK_USER
    elif query.data == 'manage_users':
        await query.message.reply_text("–§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    elif query.data == 'statistics':
        statistics = get_statistics()  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await query.message.reply_text(
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {statistics['user_count']}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: {statistics['link_count']}\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: {statistics['active_subscriptions']}"
        )
    elif query.data == 'manage_subscriptions':
        await query.message.reply_text("–§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    else:
        await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é.")

async def handle_user_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    state = context.user_data.get('state')
    
    if state == BROADCAST_MESSAGE:
        await handle_broadcast_message(update, context)
        context.user_data['state'] = None
    elif state == SEARCH_USER:
        await search_user(update, context)
        context.user_data['state'] = None
    elif state == BLOCK_USER:
        await block_user(update, context)
        context.user_data['state'] = None
    elif state == 'admin_menu':
        await handle_admin_selection(update, context)
    elif state == 'waiting_for_image_text':
        context.user_data['text'] = update.message.text
        await ask_for_link_lifetime(update)
    else:
        # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        selected_option = update.message.text
        if selected_option == "üîó –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É üîó":
            await generate_link(update, context)
        elif selected_option == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
            await profile(update, context)
        elif selected_option == "üíº –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ üíº":
            await update.message.reply_text("–≠—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞.")
        elif selected_option == "–ü–æ–¥–ø–∏—Å–∫–∞ üí∞":
            await subscription(update, context)
        elif selected_option == "üìï –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ üìï":
            await privacy_policy(update, context)
        elif selected_option == "‚öô –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–æ–µ –º–µ–Ω—é ‚öô":
            await show_admin_menu(update, context)
        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é.")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω.")
    context.user_data['state'] = None  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è

def register_handlers(dp):
    dp.add_handler(CallbackQueryHandler(handle_admin_selection, pattern='broadcast|manage_users|statistics|search_user|manage_subscriptions|block_user'))
    dp.add_handler(CommandHandler('cancel', cancel))
